package main.se450.singletons;

import java.awt.Color;

import main.se450.interfaces.IStrategy;
import main.se450.model.Configuration;
import main.se450.parser.ConfigurationParser;

/**
 * The singleton Class ConfigurationManager handles and manages all the accesses
 * to the configuration.
 */
public class ConfigurationManager {

	/** The configuration manager. */
	private static ConfigurationManager configurationManager = null;

	/** The configuration. */
	private Configuration configuration = null;

	static {
		configurationManager = new ConfigurationManager();
	}

	/**
	 * Instantiates a new configuration manager.
	 */
	private ConfigurationManager() {

	}

	/**
	 * Get the configuration manager.
	 *
	 * @return The configuration manager
	 */
	public final static ConfigurationManager getConfigurationManager() {
		return configurationManager;
	}

	/**
	 * Get current configuration.
	 *
	 * @return The current configuration
	 */
	public final Configuration getConfiguration() {
		return configuration;
	}

	/**
	 * Load configuration from parser.
	 */
	public final void loadConfigurationFromParser() {
		ConfigurationParser.loadConfiguration("configuration.json");
	}

	/**
	 * Set the current configuration with parameters.
	 *
	 * @param framesPerSecond
	 *            The number of frames per second, representing the overall game
	 *            speed.
	 * @param repeatKeySpeed
	 *            The repeat key speed of the keyboard repeat rate.
	 * @param width
	 *            The width of the main window.
	 * @param height
	 *            The height of the main window.
	 * @param shapes
	 *            The number of shapes will be initialized at the beginning.
	 * @param shipWidth
	 *            The width of the player ship.
	 * @param shipHeight
	 *            The height of the player ship.
	 * @param shotSpeed
	 *            The speed at which a shot will travel.
	 * @param shotDiameter
	 *            The diameter of the player ship shots.
	 * @param shotLifetime
	 *            The amount of frames a shot will last.
	 * @param forwardThrust
	 *            The amount of forward thrust generated by each tap.
	 * @param reverseThrust
	 *            The amount of reverse thrust generated by each tap.
	 * @param friction
	 *            The speed at which the ship slows.
	 * @param leftRight
	 *            The amount at which the player ship rotates.
	 * @param color
	 *            The ship's color.
	 * @param borders
	 *            The border strategy of the player ship.
	 * @param lives
	 *            The initial number of lives a player has.
	 * @param shields
	 *            The initial number of available shields a player has.
	 */
	public final void setConfiguration(int framesPerSecond, int repeatKeySpeed, int width, int height, int shapes,
			int shipWidth, int shipHeight, float shotSpeed, float shotDiameter, int shotLifetime, float forwardThrust,
			float reverseThrust, float friction, float leftRight, Color color, IStrategy borders, int lives,
			int shields) {
		configuration = new Configuration(framesPerSecond, repeatKeySpeed, width, height, shapes, shipWidth, shipHeight,
				shotSpeed, shotDiameter, shotLifetime, forwardThrust, reverseThrust, friction, leftRight, color,
				borders, lives, shields);
	}
}
