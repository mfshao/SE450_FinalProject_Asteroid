package main.se450.model;

import java.awt.Color;
import main.se450.interfaces.IStrategy;

/**
 * The Class Configuration represents a configuration file.
 */
public class Configuration {

	/** The frames per second. */
	private int framesPerSecond = 0;

	/** The repeat key speed. */
	private int repeatKeySpeed = 0;

	/** The width. */
	private int width = 0;

	/** The height. */
	private int height = 0;

	/** The shapes. */
	private int shapes = 0;

	/** The ship width. */
	private int shipWidth = 0;

	/** The ship height. */
	private int shipHeight = 0;

	/** The shot speed. */
	private float shotSpeed = 0.0f;

	/** The shot diameter. */
	private float shotDiameter = 0.0f;

	/** The shot lifetime. */
	private int shotLifetime = 0;

	/** The forward thrust. */
	private float forwardThrust = 0.0f;

	/** The reverse thrust. */
	private float reverseThrust = 0.0f;

	/** The friction. */
	private float friction = 0.0f;

	/** The left right. */
	private float leftRight = 0.0f;

	/** The color. */
	private Color color = null;

	/** The borders. */
	private IStrategy borders = null;

	/** The lives. */
	private int lives = 0;

	/** The shields. */
	private int shields = 0;

	/**
	 * Instantiates a new configuration with a set of parameters.
	 *
	 * @param framesPerSecond
	 *            The number of frames per second, representing the overall game
	 *            speed.
	 * @param repeatKeySpeed
	 *            The repeat key speed of the keyboard repeat rate.
	 * @param width
	 *            The width of the main window.
	 * @param height
	 *            The height of the main window.
	 * @param shapes
	 *            The number of shapes will be initialized at the beginning.
	 * @param shipWidth
	 *            The width of the player ship.
	 * @param shipHeight
	 *            The height of the player ship.
	 * @param shotSpeed
	 *            The speed at which a shot will travel.
	 * @param shotDiameter
	 *            The diameter of the player ship shots.
	 * @param shotLifetime
	 *            The amount of frames a shot will last.
	 * @param forwardThrust
	 *            The amount of forward thrust generated by each tap.
	 * @param reverseThrust
	 *            The amount of reverse thrust generated by each tap.
	 * @param friction
	 *            The speed at which the ship slows.
	 * @param leftRight
	 *            The amount at which the player ship rotates.
	 * @param color
	 *            The ship's color.
	 * @param borders
	 *            The border strategy of the player ship.
	 * @param lives
	 *            The initial number of lives a player has.
	 * @param shields
	 *            The initial number of available shields a player has.
	 */
	public Configuration(int framesPerSecond, int repeatKeySpeed, int width, int height, int shapes, int shipWidth,
			int shipHeight, float shotSpeed, float shotDiameter, int shotLifetime, float forwardThrust,
			float reverseThrust, float friction, float leftRight, Color color, IStrategy borders, int lives,
			int shields) {
		super();
		this.framesPerSecond = framesPerSecond;
		this.width = width;
		this.height = height;
		this.repeatKeySpeed = repeatKeySpeed;
		this.shapes = shapes;
		this.shipWidth = shipWidth;
		this.shipHeight = shipHeight;
		this.shotSpeed = shotSpeed;
		this.shotDiameter = shotDiameter;
		this.shotLifetime = shotLifetime;
		this.forwardThrust = forwardThrust;
		this.reverseThrust = reverseThrust;
		this.friction = friction;
		this.leftRight = leftRight;
		this.color = color;
		this.borders = borders;
		this.lives = lives;
		this.shields = shields;
	}

	/**
	 * Get the width of the main window.
	 *
	 * @return The width of the main window.
	 */
	public int getWidth() {
		return width;
	}

	/**
	 * Get the height of the main window.
	 *
	 * @return The height of the main window.
	 */
	public int getHeight() {
		return height;
	}

	/**
	 * Get the number of frames per second.
	 *
	 * @return The number of frames per second.
	 */
	public int getFramesPerSecond() {
		return framesPerSecond;
	}

	/**
	 * Get the number of shapes will be initialized at the beginning.
	 *
	 * @return The number of shapes will be initialized at the beginning.
	 */
	public int getShapes() {
		return shapes;
	}

	/**
	 * Get the speed at which a shot will travel.
	 *
	 * @return The speed at which a shot will travel.
	 */
	public float getShotSpeed() {
		return shotSpeed;
	}

	/**
	 * Get the diameter of the player ship shots.
	 *
	 * @return The diameter of the player ship shots.
	 */
	public float getShotDiameter() {
		return shotDiameter;
	}

	/**
	 * Get the amount of frames a shot will last.
	 *
	 * @return The amount of frames a shot will last.
	 */
	public int getShotLifetime() {
		return shotLifetime;
	}

	/**
	 * Get the amount of forward thrust generated by each tap.
	 *
	 * @return The amount of forward thrust generated by each tap.
	 */
	public float getForwardThrust() {
		return forwardThrust;
	}

	/**
	 * Get the amount of reverse thrust generated by each tap.
	 *
	 * @return The amount of reverse thrust generated by each tap.
	 */
	public float getReverseThrust() {
		return reverseThrust;
	}

	/**
	 * Get the speed at which the ship slows.
	 *
	 * @return The speed at which the ship slows.
	 */
	public float getFriction() {
		return friction;
	}

	/**
	 * Get the amount at which the player ship rotates.
	 *
	 * @return The amount at which the player ship rotates.
	 */
	public float getLeftRight() {
		return leftRight;
	}

	/**
	 * Get the ship's color.
	 *
	 * @return The ship's color.
	 */
	public Color getColor() {
		return color;
	}

	/**
	 * Get the border strategy of the player ship.
	 *
	 * @return The border strategy of the player ship.
	 */
	public IStrategy getBorders() {
		return borders;
	}

	/**
	 * Gets the repeat key speed.
	 *
	 * @return the repeat key speed
	 */
	public int getRepeatKeySpeed() {
		return repeatKeySpeed;
	}

	/**
	 * Get the width of the player ship.
	 *
	 * @return The width of the player ship.
	 */
	public int getShipWidth() {
		return shipWidth;
	}

	/**
	 * Get the height of the player ship.
	 *
	 * @return The height of the player ship.
	 */
	public int getShipHeight() {
		return shipHeight;
	}

	/**
	 * Get the initial number of lives a player has.
	 *
	 * @return The initial number of lives a player has.
	 */
	public int getLives() {
		return lives;
	}

	/**
	 * Get the initial number of available shields a player has.
	 *
	 * @return The initial number of available shields a player has.
	 */
	public int getShields() {
		return shields;
	}

}
